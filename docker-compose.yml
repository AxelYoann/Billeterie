version: '3.8'

services:
  # Application Node.js
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongo:27017/multi-billeterie
      - JWT_SECRET=your-super-secret-jwt-key-for-development
      - PORT=3000
    depends_on:
      - mongo
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - billeterie-network

  # Base de données MongoDB
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: multi-billeterie
    volumes:
      - mongo_data:/data/db
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - billeterie-network

  # Interface d'administration MongoDB (optionnel)
  mongo-express:
    image: mongo-express:latest
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo
    networks:
      - billeterie-network

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - billeterie-network

# Volumes persistants
volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local

# Réseau personnalisé
networks:
  billeterie-network:
    driver: bridge